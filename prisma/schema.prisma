// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CriticalityEnum {
  low
  medium
  high
}

enum ComponentTypeEnum {
  mechanical
  electrical
  instrumentation
  rotating
  static
  other
}

enum FmecaStudyStatusEnum {
  draft
  in_review
  approved
  archived
}

enum FmecaApprovalStatusEnum {
  pending
  approved
  rejected
}

enum CmTechniqueEnum {
  vibration
  thermography
  ultrasound
  oil
  visual
  motor_current
  acoustic
  other
}

enum CmReadingStatusEnum {
  ok
  warning
  alarm
}

enum ActionEntityTypeEnum {
  fmeca_item
  cm_reading
  component
}

enum ActionPriorityEnum {
  low
  medium
  high
  urgent
}

enum ActionStatusEnum {
  open
  in_progress
  blocked
  done
  cancelled
}

enum AttachmentEntityTypeEnum {
  fmeca_item
  cm_reading
  action
  asset
  component
}

enum AuditLogEntityTypeEnum {
  user
  role
  company
  site
  area
  system
  asset
  component
  fmeca_study
  fmeca_item
  cm_task
  cm_reading
  action
  attachment
  fmeca_category
  failure_mode
  rating_scale
  criticality_rule
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password_hash String
  full_name     String?
  is_active     Boolean   @default(true)
  last_login_at DateTime? @map("last_login_at")
  created_at    DateTime  @default(now()) @map("created_at")

  roles         UserRole[]
  fmecaStudies  FmecaStudy[] @relation("FmecaStudyOwner")
  fmecaApprovals FmecaApproval[] @relation("FmecaApprover")
  cmReadings    CmReading[] @relation("CmReadingPerformer")
  actionsCreated Actions[] @relation("ActionCreator")
  actionsAssigned Actions[] @relation("ActionAssignee")
  actionComments ActionComment[]
  attachments   Attachment[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Role {
  id    String     @id @default(uuid())
  name  String     @unique

  users UserRole[]

  @@map("roles")
}

model UserRole {
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @map("user_id")
  role    Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id String @map("role_id")

  @@id([user_id, role_id])
  @@map("user_roles")
}

model Company {
  id         String     @id @default(uuid())
  name       String     @unique
  code       String     @unique
  created_at DateTime   @default(now()) @map("created_at")

  sites      Site[]
  fmecaStudies FmecaStudy[]

  @@map("companies")
}

model Site {
  id         String   @id @default(uuid())
  company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id String   @map("company_id")
  name       String
  code       String
  created_at DateTime @default(now()) @map("created_at")

  areas      Area[]

  @@unique([company_id, code])
  @@map("sites")
}

model Area {
  id         String   @id @default(uuid())
  site       Site     @relation(fields: [site_id], references: [id], onDelete: Cascade)
  site_id    String   @map("site_id")
  name       String
  code       String
  created_at DateTime @default(now()) @map("created_at")

  systems    System[]

  @@unique([site_id, code])
  @@map("areas")
}

model System {
  id         String   @id @default(uuid())
  area       Area     @relation(fields: [area_id], references: [id], onDelete: Cascade)
  area_id    String   @map("area_id")
  name       String
  code       String
  created_at DateTime @default(now()) @map("created_at")

  assets     Asset[]

  @@unique([area_id, code])
  @@map("systems")
}

model Asset {
  id           String         @id @default(uuid())
  system       System         @relation(fields: [system_id], references: [id], onDelete: Cascade)
  system_id    String         @map("system_id")
  name         String
  tag_code     String
  criticality  CriticalityEnum @default(low)
  created_at   DateTime       @default(now()) @map("created_at")

  components   Component[]
  attachments  Attachment[] @relation("AssetAttachments")

  @@unique([system_id, tag_code])
  @@map("assets")
  @@index([name, tag_code], map: "assets_name_tag_code_idx")
}

model Component {
  id             String        @id @default(uuid())
  asset          Asset         @relation(fields: [asset_id], references: [id], onDelete: Cascade)
  asset_id       String        @map("asset_id")
  name           String
  component_code String
  type           ComponentTypeEnum
  created_at     DateTime      @default(now()) @map("created_at")

  fmecaItems     FmecaItem[]
  cmTasks        CmTask[]
  attachments    Attachment[] @relation("ComponentAttachments")
  actions        Actions[] @relation("ComponentActions")

  @@unique([asset_id, component_code])
  @@map("components")
  @@index([name, component_code], map: "components_name_component_code_idx")
}

model FmecaCategory {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?

  failureModes  FailureMode[]

  @@map("fmeca_categories")
}

model FailureMode {
  id              String        @id @default(uuid())
  category        FmecaCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id     String        @map("category_id")
  code            String
  title           String
  description     String?
  typical_causes  String?       @map("typical_causes") @db.Text
  typical_effects String?       @map("typical_effects") @db.Text
  detection_methods String?     @map("detection_methods") @db.Text

  fmecaItems      FmecaItem[]

  @@unique([category_id, code])
  @@map("failure_modes")
}

model RatingScale {
  id          String            @id @default(uuid())
  name        String            @unique
  dimension   String // ENUM('severity','occurrence','detectability')
  min_value   Int               @map("min_value")
  max_value   Int               @map("max_value")
  description String?

  values      RatingScaleValue[]

  @@map("rating_scales")
}

model RatingScaleValue {
  id        String      @id @default(uuid())
  scale     RatingScale @relation(fields: [scale_id], references: [id], onDelete: Cascade)
  scale_id  String      @map("scale_id")
  value     Int
  label     String
  description String?

  @@unique([scale_id, value])
  @@map("rating_scale_values")
}

model CriticalityRule {
  id            String  @id @default(uuid())
  name          String  @unique
  description   String?
  rpn_thresholds Json    @map("rpn_thresholds") @db.JsonB
  color_map     Json    @map("color_map") @db.JsonB

  @@map("criticality_rules")
}

model FmecaStudy {
  id           String             @id @default(uuid())
  company      Company            @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id   String             @map("company_id")
  title        String             @unique // Added @unique
  scope        String?            @db.Text
  status       FmecaStudyStatusEnum @default(draft)
  owner        User               @relation("FmecaStudyOwner", fields: [owner_user_id], references: [id])
  owner_user_id String            @map("owner_user_id")
  created_at   DateTime           @default(now()) @map("created_at")
  updated_at   DateTime           @updatedAt @map("updated_at")

  items        FmecaItem[]
  approvals    FmecaApproval[]

  @@map("fmeca_studies")
}

model FmecaItem {
  id                  String          @id @default(uuid())
  study               FmecaStudy      @relation(fields: [study_id], references: [id], onDelete: Cascade)
  study_id            String          @map("study_id")
  component           Component       @relation(fields: [component_id], references: [id], onDelete: Cascade)
  component_id        String          @map("component_id")
  function            String          @db.Text
  failure_mode        FailureMode     @relation(fields: [failure_mode_id], references: [id])
  failure_mode_id     String          @map("failure_mode_id")
  effect              String          @db.Text
  cause               String          @db.Text
  detection           String          @db.Text
  severity            Int
  occurrence          Int
  detectability       Int
  rpn                 Int             @default(0) @map("rpn")
  criticality         CriticalityEnum @default(low)
  recommended_actions String?         @map("recommended_actions") @db.Text
  monitoring_techniques String[]      @map("monitoring_techniques") @db.Text

  attachments         Attachment[] @relation("FmecaItemAttachments")
  actions             Actions[] @relation("FmecaItemActions")

  @@unique([study_id, component_id, failure_mode_id]) // Added composite unique constraint
  @@map("fmeca_items")
}

model FmecaApproval {
  id               String              @id @default(uuid())
  study            FmecaStudy          @relation(fields: [study_id], references: [id], onDelete: Cascade)
  study_id         String              @map("study_id")
  approver         User                @relation("FmecaApprover", fields: [approver_user_id], references: [id])
  approver_user_id String              @map("approver_user_id")
  status           FmecaApprovalStatusEnum
  comment          String?             @db.Text
  decided_at       DateTime            @map("decided_at")

  @@map("fmeca_approvals")
}

model CmTask {
  id                  String      @id @default(uuid())
  component           Component   @relation(fields: [component_id], references: [id], onDelete: Cascade)
  component_id        String      @map("component_id")
  technique           CmTechniqueEnum
  interval_days       Int         @map("interval_days")
  procedure           String      @db.Text
  acceptance_criteria String      @map("acceptance_criteria") @db.Text
  last_performed_at   DateTime?   @map("last_performed_at")
  next_due_at         DateTime?   @map("next_due_at") // Made optional

  readings            CmReading[]

  @@unique([component_id, technique]) // Added composite unique constraint
  @@map("cm_tasks")
}

model CmReading {
  id                 String          @id @default(uuid())
  task               CmTask          @relation(fields: [task_id], references: [id], onDelete: Cascade)
  task_id            String          @map("task_id")
  performed_at       DateTime        @map("performed_at")
  result             Json            @db.JsonB
  status             CmReadingStatusEnum
  notes              String?         @db.Text
  performed_by       User            @relation("CmReadingPerformer", fields: [performed_by_user_id], references: [id])
  performed_by_user_id String        @map("performed_by_user_id")

  attachments        Attachment[] @relation("CmReadingAttachments")
  actions            Actions[] @relation("CmReadingActions")

  @@unique([task_id, performed_at]) // Added composite unique constraint
  @@map("cm_readings")
}

model Attachment {
  id               String                 @id @default(uuid())
  entity_type      AttachmentEntityTypeEnum @map("entity_type")
  entity_id        String                 @map("entity_id")
  file_path        String                 @map("file_path")
  original_name    String                 @map("original_name")
  mime_type        String                 @map("mime_type")
  size_bytes       Int                    @map("size_bytes")
  uploaded_by      User                   @relation(fields: [uploaded_by_user_id], references: [id])
  uploaded_by_user_id String              @map("uploaded_by_user_id")
  uploaded_at      DateTime               @default(now()) @map("uploaded_at")

  // Explicit foreign keys for each possible entity type
  asset_id         String?                @map("asset_id")
  component_id     String?                @map("component_id")
  fmeca_item_id    String?                @map("fmeca_item_id")
  cm_reading_id    String?                @map("cm_reading_id")
  action_id        String?                @map("action_id")

  // Relations linking to the explicit foreign keys
  asset            Asset?                 @relation(name: "AssetAttachments", fields: [asset_id], references: [id])
  component        Component?             @relation(name: "ComponentAttachments", fields: [component_id], references: [id])
  fmecaItem        FmecaItem?             @relation(name: "FmecaItemAttachments", fields: [fmeca_item_id], references: [id])
  cmReading        CmReading?             @relation(name: "CmReadingAttachments", fields: [cm_reading_id], references: [id])
  action           Actions?               @relation(name: "ActionAttachments", fields: [action_id], references: [id])

  @@map("attachments")
}

model Actions {
  id               String           @id @default(uuid())
  title            String
  description      String?          @db.Text
  entity_type      ActionEntityTypeEnum @map("entity_type")
  entity_id        String           @map("entity_id")
  assignee         User             @relation("ActionAssignee", fields: [assignee_user_id], references: [id])
  assignee_user_id String           @map("assignee_user_id")
  due_date         DateTime         @map("due_date") @db.Date
  priority         ActionPriorityEnum
  status           ActionStatusEnum @default(open)
  created_by       User             @relation("ActionCreator", fields: [created_by_user_id], references: [id])
  created_by_user_id String         @map("created_by_user_id")
  created_at       DateTime         @default(now()) @map("created_at")
  updated_at       DateTime         @updatedAt @map("updated_at")

  comments         ActionComment[]
  attachments      Attachment[] @relation("ActionAttachments") // This is the inverse relation from Attachment

  // Explicit foreign keys for each possible entity type
  component_id     String?          @map("component_id")
  fmeca_item_id    String?          @map("fmeca_item_id")
  cm_reading_id    String?          @map("cm_reading_id")

  // Relations linking to the explicit foreign keys
  component        Component?       @relation(name: "ComponentActions", fields: [component_id], references: [id])
  fmecaItem        FmecaItem?       @relation(name: "FmecaItemActions", fields: [fmeca_item_id], references: [id])
  cmReading        CmReading?       @relation(name: "CmReadingActions", fields: [cm_reading_id], references: [id])

  @@map("actions")
  @@index([status], map: "actions_status_idx")
}

model ActionComment {
  id           String   @id @default(uuid())
  action       Actions  @relation(fields: [action_id], references: [id], onDelete: Cascade)
  action_id    String   @map("action_id")
  author       User     @relation(fields: [author_user_id], references: [id])
  author_user_id String   @map("author_user_id")
  note         String   @db.Text
  created_at   DateTime @default(now()) @map("created_at")

  @@map("action_comments")
}

model AuditLog {
  id          String               @id @default(uuid())
  user        User?                @relation(fields: [user_id], references: [id])
  user_id     String?              @map("user_id")
  action      String
  entity_type AuditLogEntityTypeEnum @map("entity_type")
  entity_id   String
  details     Json                 @db.JsonB
  created_at  DateTime             @default(now()) @map("created_at")

  @@map("audit_logs")
}

// Session table for connect-pg-simple
// Prisma will not manage this table directly, but it's good to have it in the schema for reference
model Session {
  sid    String   @id @unique
  sess   Json     @db.JsonB
  expire DateTime

  @@map("session")
}
